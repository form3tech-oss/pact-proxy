package app

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"strconv"
	"strings"
	"sync/atomic"
	"testing"

	"github.com/form3tech-oss/pact-proxy/pkg/pactproxy"
	"github.com/pact-foundation/pact-go/dsl"
)

type ProxyStage struct {
	t                  *testing.T
	pact               *dsl.Pact
	proxy              *pactproxy.PactProxy
	constraintValue    string
	pactResult         error
	requestsToSend     int32
	requestsSent       int32
	responses          []*http.Response
	responseBodies     [][]byte
	modifiedStatusCode int
	modifiedAttempt    *int
	modifiedBody       map[string]string
}

const (
	PostNamePact        = "A request to create a user"
	PostAddressPact     = "A request to create an address"
	PostLargeStringPact = "A request to create car with large response"
	largeString         = "\\\\n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"
)

func NewProxyStage(t *testing.T) (*ProxyStage, *ProxyStage, *ProxyStage, func()) {
	pact := &dsl.Pact{
		Consumer: "MyConsumer",
		Provider: "MyProvider",
		Host:     "localhost",
	}

	pact.Setup(true)
	proxy, err := pactproxy.
		Configuration(adminURL.String()).
		SetupProxy(proxyURL.String(), fmt.Sprintf("http://%s:%d", pact.Host, pact.Server.Port))
	if err != nil {
		t.Logf("Error setting up proxy: %v", err)
		t.Fail()
	}

	pact.Server.Port, err = strconv.Atoi(proxyURL.Port())
	if err != nil {
		t.Logf("Error parsing server port: %v", err)
		t.Fail()
	}

	stage := &ProxyStage{
		t:            t,
		proxy:        proxy,
		pact:         pact,
		modifiedBody: make(map[string]string),
	}

	return stage, stage, stage, func() {
		pactproxy.Configuration(adminURL.String()).Reset()
		pact.Teardown()
	}
}

func (s *ProxyStage) and() *ProxyStage {
	return s
}

func (s *ProxyStage) a_pact_for_large_string_generation() *ProxyStage {
	s.pact.
		AddInteraction().
		UponReceiving(PostLargeStringPact).
		WithRequest(dsl.Request{
			Method:  "POST",
			Path:    dsl.String("/string"),
			Headers: dsl.MapMatcher{"Content-Type": dsl.String("application/json")},
			Body:    dsl.MapMatcher{"length": dsl.String("3000")},
		}).
		WillRespondWith(dsl.Response{
			Status:  200,
			Headers: dsl.MapMatcher{"Content-Type": dsl.String("application/json")},
			Body:    dsl.MapMatcher{"generated": dsl.String(largeString)},
		})
	return s
}

func (s *ProxyStage) a_pact_that_allows_any_names() *ProxyStage {
	s.pact.
		AddInteraction().
		UponReceiving(PostNamePact).
		WithRequest(dsl.Request{
			Method:  "POST",
			Path:    dsl.String("/users"),
			Headers: dsl.MapMatcher{"Content-Type": dsl.String("application/json")},
			Body:    dsl.MapMatcher{"name": dsl.Regex("any", ".*")},
		}).
		WillRespondWith(dsl.Response{
			Status:  200,
			Headers: dsl.MapMatcher{"Content-Type": dsl.String("application/json")},
			Body:    map[string]string{"name": "any"},
		})
	return s
}

func (s *ProxyStage) a_pact_that_returns_no_body() *ProxyStage {
	s.pact.
		AddInteraction().
		UponReceiving(PostNamePact).
		WithRequest(dsl.Request{
			Method:  "POST",
			Path:    dsl.String("/users"),
			Headers: dsl.MapMatcher{"Content-Type": dsl.String("application/json")},
			Body:    dsl.MapMatcher{"name": dsl.Regex("any", ".*")},
		}).
		WillRespondWith(dsl.Response{
			Status:  204,
			Headers: dsl.MapMatcher{"Content-Type": dsl.String("application/json")},
		})
	return s
}

func (s *ProxyStage) a_pact_that_allows_any_first_and_last_names() *ProxyStage {
	s.pact.
		AddInteraction().
		UponReceiving(PostNamePact).
		WithRequest(dsl.Request{
			Method:  "POST",
			Path:    dsl.String("/users"),
			Headers: dsl.MapMatcher{"Content-Type": dsl.String("application/json")},
			Body: dsl.MapMatcher{
				"first_name": dsl.Regex("any", ".*"),
				"last_name":  dsl.Regex("any", ".*"),
			},
		}).
		WillRespondWith(dsl.Response{
			Status:  200,
			Headers: dsl.MapMatcher{"Content-Type": dsl.String("application/json")},
			Body:    map[string]string{"first_name": "any", "last_name": "any"},
		})
	return s
}

func (s *ProxyStage) a_pact_that_allows_any_address() *ProxyStage {
	s.pact.
		AddInteraction().
		UponReceiving(PostAddressPact).
		WithRequest(dsl.Request{
			Method:  "POST",
			Path:    dsl.String("/addresses"),
			Headers: dsl.MapMatcher{"Content-Type": dsl.String("application/json")},
		}).
		WillRespondWith(dsl.Response{
			Status:  200,
			Headers: dsl.MapMatcher{"Content-Type": dsl.String("application/json")},
			Body:    map[string]string{"address": "any"},
		})
	return s
}

func (s *ProxyStage) a_constaint_is_added(name string) *ProxyStage {
	s.constraintValue = name
	return s
}

func (s *ProxyStage) a_request_is_sent_to_generate_large_string() {
	s.pactResult = s.pact.Verify(func() (err error) {
		u := fmt.Sprintf("http://localhost:%s/string", proxyURL.Port())
		req, err := http.NewRequest("POST", u, strings.NewReader(`{"length":"3000"}`))
		if err != nil {
			return err
		}

		req.Header.Set("Content-Type", "application/json")
		res, err := http.DefaultClient.Do(req)
		if err != nil {
			return err
		}
		s.responses = append(s.responses, res)
		bodyBytes, err := io.ReadAll(res.Body)
		if err != nil {
			s.t.Fatalf("unable to read response body, %v", err)
		}
		s.responseBodies = append(s.responseBodies, bodyBytes)
		return nil
	})
}

func (s *ProxyStage) a_request_is_sent_using_the_name(name string) {
	s.pactResult = s.pact.Verify(func() (err error) {
		s.proxy.ForInteraction(PostNamePact).AddConstraint("$.body.name", s.constraintValue)

		u := fmt.Sprintf("http://localhost:%s/users", proxyURL.Port())
		req, err := http.NewRequest("POST", u, strings.NewReader(fmt.Sprintf(`{"name":"%s"}`, name)))
		if err != nil {
			return err
		}

		req.Header.Set("Content-Type", "application/json")

		res, err := http.DefaultClient.Do(req)
		if err != nil {
			return err
		}
		s.responses = append(s.responses, res)
		bodyBytes, err := io.ReadAll(res.Body)
		if err != nil {
			s.t.Fatalf("unable to read response body, %v", err)
		}
		s.responseBodies = append(s.responseBodies, bodyBytes)
		return nil
	})
}

func (s *ProxyStage) a_request_is_sent_with_modifiers_using_the_name(name string) {
	s.n_requests_are_sent_with_modifiers_using_the_name(1, name)
}

func (s *ProxyStage) n_requests_are_sent_with_modifiers_using_the_name(n int, name string) {
	s.n_requests_are_sent_with_modifiers_using_the_body(n, fmt.Sprintf(`{"name":"%s"}`, name))
}

func (s *ProxyStage) n_requests_are_sent_with_modifiers_using_the_body(n int, body string) {
	s.pactResult = s.pact.Verify(func() (err error) {
		i := s.proxy.
			ForInteraction(PostNamePact)

		if s.modifiedStatusCode != 0 {
			i.AddModifier("$.status", fmt.Sprintf("%d", s.modifiedStatusCode), s.modifiedAttempt)
		}

		for path, value := range s.modifiedBody {
			i.AddModifier(path, value, s.modifiedAttempt)
		}

		u := fmt.Sprintf("http://localhost:%s/users", proxyURL.Port())

		for i := 0; i < n; i++ {
			req, err := http.NewRequest("POST", u, strings.NewReader(body))
			if err != nil {
				return err
			}

			req.Header.Set("Content-Type", "application/json")
			res, err := http.DefaultClient.Do(req)
			if err != nil {
				s.t.Error(err)
				return err
			}
			s.responses = append(s.responses, res)
			bodyBytes, err := io.ReadAll(res.Body)
			if err != nil {
				s.t.Fatalf("unable to read response body, %v", err)
			}
			s.responseBodies = append(s.responseBodies, bodyBytes)
		}

		return nil
	})
}

func (s *ProxyStage) pact_verification_is_successful() *ProxyStage {
	if s.pactResult != nil {
		s.t.Error(s.pactResult)
		s.t.Fail()
	}

	return s
}

func (s *ProxyStage) pact_verification_is_not_successful() {
	if s.pactResult == nil {
		s.t.Error("pact verification did not fail")
		s.t.Fail()
	}
}

func (s *ProxyStage) multiple_requests_are_sent(requestsToSend int32) {
	s.pactResult = s.pact.Verify(func() (err error) {
		s.requestsToSend = requestsToSend
		atomic.StoreInt32(&s.requestsSent, 0)
		go func() {
			for i := int32(0); i < requestsToSend; i++ {
				u := fmt.Sprintf("http://localhost:%s/users", proxyURL.Port())
				req, err := http.NewRequest("POST", u, strings.NewReader(`{"name":"test"}`))
				if err != nil {
					s.t.Error(err)
					s.t.Fail()
				}

				req.Header.Set("Content-Type", "application/json")
				atomic.AddInt32(&s.requestsSent, 1)
				if _, err = http.DefaultClient.Do(req); err != nil {
					s.t.Error(err)
					s.t.Fail()
				}
			}
		}()

		if err := s.proxy.WaitForInteraction(PostNamePact, int(requestsToSend)); err != nil {
			s.t.Error(err)
			s.t.Fail()
		}

		return nil
	})
}

func (s *ProxyStage) the_proxy_waits_for_all_requests() *ProxyStage {
	sent := atomic.LoadInt32(&s.requestsSent)
	if sent != s.requestsToSend {
		s.t.Errorf("proxy did not wait for requests, sent=%d expected=%d", sent, s.requestsToSend)
		s.t.Fail()
	}
	return s
}

func (s *ProxyStage) requests_for_names_and_addresse_are_sent() *ProxyStage {
	s.pactResult = s.pact.Verify(func() (err error) {
		s.requestsToSend = 2
		atomic.StoreInt32(&s.requestsSent, 0)
		go func() {
			u := fmt.Sprintf("http://localhost:%s/users", proxyURL.Port())
			req, err := http.NewRequest("POST", u, strings.NewReader(`{"name":"test"}`))
			if err != nil {
				s.t.Error(err)
				s.t.Fail()
			}

			req.Header.Set("Content-Type", "application/json")
			atomic.AddInt32(&s.requestsSent, 1)
			if _, err = http.DefaultClient.Do(req); err != nil {
				s.t.Error(err)
				s.t.Fail()
			}
		}()

		go func() {
			u := fmt.Sprintf("http://localhost:%s/addresses", proxyURL.Port())
			req, err := http.NewRequest("POST", u, strings.NewReader(`{"address":"test"}`))
			if err != nil {
				s.t.Error(err)
				s.t.Fail()
			}

			req.Header.Set("Content-Type", "application/json")
			atomic.AddInt32(&s.requestsSent, 1)
			if _, err = http.DefaultClient.Do(req); err != nil {
				s.t.Error(err)
				s.t.Fail()
			}
		}()

		if err := s.proxy.WaitForAll(); err != nil {
			s.t.Error(err)
			s.t.Fail()
		}

		return nil
	})
	return s
}

func (s *ProxyStage) a_modified_response_status_of_(statusCode int) *ProxyStage {
	s.modifiedStatusCode = statusCode
	return s
}

func (s *ProxyStage) a_modified_response_body_of_(path, value string) *ProxyStage {
	s.modifiedBody[path] = value
	return s
}

func (s *ProxyStage) the_response_is_(statusCode int) *ProxyStage {
	s.the_nth_response_is_(1, statusCode)

	return s
}

func (s *ProxyStage) the_response_name_is_(name string) *ProxyStage {
	s.the_nth_response_name_is_(1, name)

	return s
}

func (s *ProxyStage) a_modified_response_attempt_of(i int) {
	s.modifiedAttempt = &i
}

func (s *ProxyStage) the_nth_response_is_(n, statusCode int) *ProxyStage {
	if len(s.responses) < n {
		s.t.Fatalf("Expected at least %d responses, got %d", n, len(s.responses))
	}

	if s.responses[n-1].StatusCode != statusCode {
		s.t.Fatalf("Expected status code on attemt %d: %d, got : %d", n, statusCode, s.responses[n-1].StatusCode)
	}

	return s
}

func (s *ProxyStage) the_nth_response_name_is_(n int, name string) *ProxyStage {
	if len(s.responses) < n {
		s.t.Fatalf("Expected at least %d responses, got %d", n, len(s.responses))
	}

	var body map[string]string
	if err := json.Unmarshal(s.responseBodies[n-1], &body); err != nil {
		s.t.Fatalf("unable to parse response body, %v", err)
	}

	if body["name"] != name {
		s.t.Fatalf("Expected name on attempt %d,: %s, got: %s", n, name, body["name"])
	}

	return s
}

func (s *ProxyStage) the_nth_response_body_has_(n int, key, value string) *ProxyStage {
	if len(s.responseBodies) < n {
		s.t.Fatalf("Expected at least %d responses, got %d", n, len(s.responseBodies))
	}

	var responseBody map[string]string
	if err := json.Unmarshal(s.responseBodies[n-1], &responseBody); err != nil {
		s.t.Fatalf("unable to parse response body, %v", err)
	}

	if responseBody[key] != value {
		s.t.Fatalf("Expected %s on attempt %d,: %s, got: %s", key, n, value, responseBody[key])
	}

	return s
}

func (s *ProxyStage) n_responses_were_received(n int) *ProxyStage {
	count := len(s.responses)
	if count != n {
		s.t.Fatalf("Expected %d responses, got %d", n, count)
	}

	return s
}

func (s *ProxyStage) pact_can_be_generated() {
	u := fmt.Sprintf("http://localhost:%s/pact", proxyURL.Port())
	req, err := http.NewRequestWithContext(context.Background(), "POST", u, bytes.NewReader([]byte("{\"pact_specification_version\":\"3.0.0\"}")))
	if err != nil {
		s.t.Error(err)
		return
	}

	req.Header.Add("X-Pact-Mock-Service", "true")
	req.Header.Add("Content-Type", "application/json")
	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		s.t.Error(err)
		return
	}

	if resp.StatusCode != http.StatusOK {
		s.t.Fatalf("Expected 200 but returned %d status code", resp.StatusCode)
	}

	defer func() { _ = resp.Body.Close() }()
}
